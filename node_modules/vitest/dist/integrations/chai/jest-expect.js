// Jest Expect Compact
// TODO: add more https://jestjs.io/docs/expect
export function JestChaiExpect() {
    return (chai, utils) => {
        const proto = chai.Assertion.prototype;
        utils.addMethod(proto, 'toEqual', function (expected) {
            return this.eql(expected);
        });
        utils.addMethod(proto, 'toStrictEqual', function (expected) {
            return this.equal(expected);
        });
        utils.addMethod(proto, 'toBe', function (expected) {
            return this.equal(expected);
        });
        utils.addMethod(proto, 'toMatchObject', function (expected) {
            return this.containSubset(expected);
        });
        utils.addMethod(proto, 'toMatch', function (expected) {
            if (typeof expected === 'string')
                return this.include(expected);
            else
                return this.match(expected);
        });
        utils.addMethod(proto, 'toContain', function (item) {
            return this.contain(item);
        });
        utils.addMethod(proto, 'toBeTruthy', function () {
            const obj = utils.flag(this, 'object');
            this.assert(Boolean(obj), 'expected #{this} to be truthy', 'expected #{this} to not be truthy', obj);
        });
        utils.addMethod(proto, 'toBeFalsy', function () {
            const obj = utils.flag(this, 'object');
            this.assert(!obj, 'expected #{this} to be falsy', 'expected #{this} to not be falsy', obj);
        });
        utils.addMethod(proto, 'toBeNaN', function () {
            return this.be.NaN;
        });
        utils.addMethod(proto, 'toBeUndefined', function () {
            return this.be.undefined;
        });
        utils.addMethod(proto, 'toBeNull', function () {
            return this.be.null;
        });
        utils.addMethod(proto, 'toBeDefined', function () {
            return this.not.be.undefined;
        });
        utils.addMethod(proto, 'toBeInstanceOf', function (obj) {
            return this.instanceOf(obj);
        });
        // mock
        utils.addMethod(proto, 'toHaveBeenCalledTimes', function (number) {
            return this.callCount(number);
        });
        utils.addMethod(proto, 'toHaveBeenCalledOnce', function () {
            return this.callCount(1);
        });
        utils.addMethod(proto, 'toHaveBeenCalled', function () {
            return this.called;
        });
        utils.addMethod(proto, 'toHaveBeenCalled', function () {
            return this.called;
        });
        utils.addMethod(proto, 'toHaveBeenCalledWith', function (...args) {
            return this.calledWith(...args);
        });
    };
}
