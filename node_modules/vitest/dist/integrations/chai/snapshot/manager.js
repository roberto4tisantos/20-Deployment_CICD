import chai from 'chai';
import Snap from 'jest-snapshot';
import { packSnapshotState, addSnapshotResult, makeEmptySnapshotSummary, } from './utils/jest-test-result-helper';
import { getSnapshotSummaryOutput } from './utils/jest-reporters-lite';
const { expect } = chai;
const { SnapshotState } = Snap;
export class SnapshotManager {
    constructor({ rootDir, update, snapshotResolver = null, }) {
        this.snapshotState = null;
        this.context = null;
        this.testFile = '';
        this.rootDir = rootDir;
        this.snapshotResolver = snapshotResolver;
        const env = process.env;
        const CI = !!env.CI;
        const UPDATE_SNAPSHOT = update || env.UPDATE_SNAPSHOT;
        this.snapshotOptions = {
            updateSnapshot: CI && !UPDATE_SNAPSHOT
                ? 'none'
                : UPDATE_SNAPSHOT
                    ? 'all'
                    : 'new',
        };
        this.snapshotSummary = makeEmptySnapshotSummary(this.snapshotOptions);
    }
    onFileChanged() {
        if (!this.context)
            return;
        if (this.snapshotState !== null)
            this.saveSnap();
        this.testFile = this.context.file;
        this.snapshotState = new SnapshotState(this.snapshotResolver.resolveSnapshotPath(this.testFile), this.snapshotOptions);
    }
    setTask(task) {
        var _a;
        this.setContext({
            file: ((_a = task.file) === null || _a === void 0 ? void 0 : _a.filepath) || task.name,
            title: task.name,
            fullTitle: [task.suite.name, task.name].filter(Boolean).join(' > '),
        });
    }
    setContext(context) {
        if (!context.title || !context.file)
            return;
        this.context = context;
        if (this.testFile !== context.file)
            this.onFileChanged();
    }
    assert(received, message) {
        if (!this.snapshotState || !this.context)
            return;
        const { actual, expected, key, pass } = this.snapshotState.match({
            testName: this.context.fullTitle || this.context.title || this.context.file,
            received,
            isInline: false,
        });
        if (!pass) {
            expect(actual.trim()).equals(expected ? expected.trim() : '', message || `Snapshot name: \`${key}\``);
        }
    }
    saveSnap() {
        if (!this.testFile || !this.snapshotState)
            return;
        const packedSnapshotState = packSnapshotState(this.snapshotState);
        addSnapshotResult(this.snapshotSummary, packedSnapshotState, this.testFile);
        this.testFile = '';
        this.snapshotState = null;
    }
    report() {
        const outputs = getSnapshotSummaryOutput(this.rootDir, this.snapshotSummary);
        if (outputs.length > 1)
            // eslint-disable-next-line no-console
            console.log(`\n${outputs.join('\n')}`);
    }
}
