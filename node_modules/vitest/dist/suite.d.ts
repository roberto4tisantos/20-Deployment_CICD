import { SuiteCollector, TestFactory, TestFunction, Suite } from './types';
export declare const defaultSuite: SuiteCollector;
export declare const test: {
    (name: string, fn: TestFunction): void;
    skip(name: string, fn: TestFunction): void;
    only(name: string, fn: TestFunction): void;
    todo(name: string): void;
};
export declare function suite(suiteName: string, factory?: TestFactory): SuiteCollector;
export declare namespace suite {
    var skip: (suiteName: string, factory?: TestFactory | undefined) => SuiteCollector;
    var only: (suiteName: string, factory?: TestFactory | undefined) => SuiteCollector;
    var todo: (suiteName: string) => SuiteCollector;
}
export declare const describe: typeof suite;
export declare const it: {
    (name: string, fn: TestFunction): void;
    skip(name: string, fn: TestFunction): void;
    only(name: string, fn: TestFunction): void;
    todo(name: string): void;
};
export declare const beforeAll: (fn: Suite['hooks']['beforeAll'][0]) => void;
export declare const afterAll: (fn: Suite['hooks']['afterAll'][0]) => void;
export declare const beforeEach: (fn: Suite['hooks']['beforeEach'][0]) => void;
export declare const afterEach: (fn: Suite['hooks']['afterEach'][0]) => void;
export declare function clearContext(): void;
