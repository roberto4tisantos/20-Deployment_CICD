import { context } from './context';
export const defaultSuite = suite('');
function getCurrentSuite() {
    return context.currentSuite || defaultSuite;
}
function createSuiteCollector(name, factory = () => { }, mode) {
    const queue = [];
    const factoryQueue = [];
    const suiteBase = {
        name,
        mode,
        hooks: {
            beforeAll: [],
            afterAll: [],
            beforeEach: [],
            afterEach: [],
        },
    };
    const collector = {
        name,
        mode,
        test,
        collect,
        clear,
        on: addHook,
    };
    function addHook(name, ...fn) {
        suiteBase.hooks[name].push(...fn);
    }
    function collectTask(name, fn, mode) {
        queue.push({
            name,
            mode,
            suite: {},
            state: (mode !== 'run' && mode !== 'only') ? mode : undefined,
            fn,
        });
    }
    function test(name, fn) {
        collectTask(name, fn, 'run');
    }
    test.skip = (name, fn) => collectTask(name, fn, 'skip');
    test.only = (name, fn) => collectTask(name, fn, 'only');
    test.todo = (name) => collectTask(name, () => { }, 'todo');
    function clear() {
        queue.length = 0;
        factoryQueue.length = 0;
    }
    async function collect(file) {
        factoryQueue.length = 0;
        if (factory)
            await factory(test);
        const tasks = [...factoryQueue, ...queue];
        const suite = Object.assign(Object.assign({}, suiteBase), { tasks,
            file });
        tasks.forEach((task) => {
            task.suite = suite;
            if (file)
                task.file = file;
        });
        return suite;
    }
    context.currentSuite = collector;
    context.suites.push(collector);
    return collector;
}
// apis
export const test = (name, fn) => getCurrentSuite().test(name, fn);
test.skip = (name, fn) => getCurrentSuite().test.skip(name, fn);
test.only = (name, fn) => getCurrentSuite().test.only(name, fn);
test.todo = (name) => getCurrentSuite().test.todo(name);
export function suite(suiteName, factory) {
    return createSuiteCollector(suiteName, factory, 'run');
}
suite.skip = (suiteName, factory) => createSuiteCollector(suiteName, factory, 'skip');
suite.only = (suiteName, factory) => createSuiteCollector(suiteName, factory, 'only');
suite.todo = (suiteName) => createSuiteCollector(suiteName, undefined, 'todo');
// alias
export const describe = suite;
export const it = test;
// hooks
export const beforeAll = (fn) => getCurrentSuite().on('beforeAll', fn);
export const afterAll = (fn) => getCurrentSuite().on('afterAll', fn);
export const beforeEach = (fn) => getCurrentSuite().on('beforeEach', fn);
export const afterEach = (fn) => getCurrentSuite().on('afterEach', fn);
// utils
export function clearContext() {
    context.suites.length = 0;
    defaultSuite.clear();
    context.currentSuite = defaultSuite;
}
